name: Build and Push Database Images

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'prod'
        type: choice
        options:
          - prod
      tag_version:
        description: 'Custom tag version (e.g., v1.0.0)'
        required: true
        type: string

env:
  DOCKER_HUB_USER: xilo

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Validate structure
        run: |
          echo "Validating project structure"
          
          # Check postgres dockerfile
          if [ ! -f "postgresql/Dockerfile" ]; then
            echo "ERROR: postgresql/Dockerfile not found"
            exit 1
          fi
          
          # Check migrations
          if [ ! -d "schema/migrations" ]; then
            echo "ERROR: schema/migrations/ directory not found"
            exit 1
          fi
          
          if [ ! -f "schema/run-migrations-postgres.sh" ]; then
            echo "ERROR: schema/run-migrations-postgres.sh not found"
            exit 1
          fi
          
          if [ ! -f "Dockerfile" ]; then
            echo "ERROR: Migration Dockerfile not found"
            exit 1
          fi
          
          echo "Structure validation passed"

      - name: Test Docker builds
        run: |
          echo "Testing postgres build"
          docker build -t test-postgres postgresql/
          
          echo "Testing migration build"
          docker build -t test-migrations .
          
          echo "Build tests passed"

  build-postgres:
    runs-on: ubuntu-latest
    needs: test
    outputs:
      image: ${{ steps.meta.outputs.primary_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate postgres tags
        id: meta
        run: |
          TAGS=""
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          CUSTOM_TAG="${{ github.event.inputs.tag_version }}"
          
          TAGS="${TAGS}${{ env.DOCKER_HUB_USER }}/safehouse-postgres:${{ github.sha }},"
          
          if [[ "$ENVIRONMENT" == "prod" ]]; then
            TAGS="${TAGS}${{ env.DOCKER_HUB_USER }}/safehouse-postgres:latest,"
          fi
          
          if [[ -n "$CUSTOM_TAG" ]]; then
            TAGS="${TAGS}${{ env.DOCKER_HUB_USER }}/safehouse-postgres:${CUSTOM_TAG},"
          fi
          
          TAGS=${TAGS%,}
          
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "Generated postgres tags: ${TAGS}"
          
          PRIMARY_TAG=$(echo $TAGS | cut -d',' -f1)
          echo "primary_tag=${PRIMARY_TAG}" >> $GITHUB_OUTPUT

      - name: Build and push postgres image
        uses: docker/build-push-action@v5
        with:
          context: ./postgresql
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  build-migrations:
    runs-on: ubuntu-latest
    needs: test
    outputs:
      image: ${{ steps.meta.outputs.primary_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate migration tags
        id: meta
        run: |
          TAGS=""
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          CUSTOM_TAG="${{ github.event.inputs.tag_version }}"
          
          TAGS="${TAGS}${{ env.DOCKER_HUB_USER }}/safehouse-migrations:${{ github.sha }},"
          
          if [[ "$ENVIRONMENT" == "prod" ]]; then
            TAGS="${TAGS}${{ env.DOCKER_HUB_USER }}/safehouse-migrations:latest,"
          fi
          
          if [[ -n "$CUSTOM_TAG" ]]; then
            TAGS="${TAGS}${{ env.DOCKER_HUB_USER }}/safehouse-migrations:${CUSTOM_TAG},"
          fi
          
          TAGS=${TAGS%,}
          
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "Generated migration tags: ${TAGS}"
          
          PRIMARY_TAG=$(echo $TAGS | cut -d',' -f1)
          echo "primary_tag=${PRIMARY_TAG}" >> $GITHUB_OUTPUT

      - name: Build and push migration image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Test migration image
        run: |
          IMAGE="${{ steps.meta.outputs.primary_tag }}"
          echo "Testing migration image: $IMAGE"
          
          docker run --rm $IMAGE --help || echo "Help test completed"

  security-scan:
    runs-on: ubuntu-latest
    needs: [build-postgres, build-migrations]

    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Scan postgres image
        run: |
          POSTGRES_IMAGE="${{ needs.build-postgres.outputs.image }}"
          
          echo "Scanning postgres image: $POSTGRES_IMAGE"
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:latest image \
            --format table \
            --exit-code 0 \
            $POSTGRES_IMAGE || echo "Postgres scan completed"

      - name: Scan migration image
        run: |
          MIGRATION_IMAGE="${{ needs.build-migrations.outputs.image }}"
          
          echo "Scanning migration image: $MIGRATION_IMAGE"
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:latest image \
            --format table \
            --exit-code 0 \
            $MIGRATION_IMAGE || echo "Migration scan completed"

  summary:
    runs-on: ubuntu-latest
    needs: [build-postgres, build-migrations, security-scan]
    if: always()

    steps:
      - name: Build Summary
        run: |
          echo "## Database Images Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tag Version:** ${{ github.event.inputs.tag_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Built Images:**" >> $GITHUB_STEP_SUMMARY
          echo "- **Postgres:** \`${{ needs.build-postgres.outputs.image }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Migrations:** \`${{ needs.build-migrations.outputs.image }}\`" >> $GITHUB_STEP_SUMMARY
